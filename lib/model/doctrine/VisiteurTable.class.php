<?php

/**
 * VisiteurTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VisiteurTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object VisiteurTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Visiteur');
    }
    
    public function getForAutocomplete($name)
    {
        $results = $this->createQuery('visiteur')
          ->select('visiteur.nom')
          ->where('visiteur.nom LIKE "%'.addslashes($name).'%" OR visiteur.pseudo_son LIKE "%'.addslashes($name).'%"')
          ->orderBy('visiteur.nom')
          ->limit(20)
          ->execute();
        $results_array = array();

        foreach ($results as $result)
        {
          $results_array[] = sprintf('%s', addslashes($result->getNom()));
        }

        return $results_array;
    }

    public function isUpdatePseudoAndEmailUnique($guid, $pseudo, $email)
    {

        $results = $this->createQuery('visiteur')
            ->select('guid')
            ->where('pseudo_son = ?', $pseudo)
            ->andWhere('email = ?', $email)
            ->andWhere('guid != ?', $guid)
            ->execute(array(), Doctrine::HYDRATE_ARRAY);
        //die($results->getSqlQuery());
        return $results;
    }

    public function isUpdatePseudoAndPasswordUnique($guid, $pseudo, $password)
    {
        $results = $this->createQuery('visiteur')
            ->select('guid')
            ->where('pseudo_son = ?', $pseudo)
            ->andWhere('password_son = ?', $password)
            ->andWhere('guid != ?', $guid)
            ->execute(array(), Doctrine::HYDRATE_ARRAY);

        return $results;
    }


    public function isUpdatePseudoUnique($guid, $pseudo)
    {
        $results = $this->createQuery('visiteur')
            ->select('guid')
            ->where('pseudo_son = ?', $pseudo)
            ->andWhere('guid != ?', $guid)
            ->execute(array(), Doctrine::HYDRATE_ARRAY);

        return $results;
    }



}