<?php

/**
 * VisiteurMedaille
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VisiteurMedaille extends BaseVisiteurMedaille
{
  public function  __toString() 
  {
    	return $this->getGuid() ? $this->getGuid() : '';
  }

  public function __call($method, $arguments)
  {
    if($method == 'setGuid')
    {
      return $this->set('guid', Guid::generate());
    }
    else
    {
      return parent::__call($method, $arguments);
    }
  }

  public function save(Doctrine_Connection $conn = null)
  {
    $this->setIsTosync(1);
    parent::save($conn);
  }

  public function hasAlreadyMedaille($connection = "insitu")
  {
    if($this->getMedaille())
  	{
  		$isUnique = $this->getMedaille()->getIsUnique();
  		if($isUnique == true)
  		{
        $visiteur_id = is_null($this->getVisiteurId()) ? $this->getVisiteur()->getGuid() : $this->getVisiteurId();
        $medaille_id = is_null($this->getMedailleId()) ? $this->getMedaille()->getGuid() : $this->getMedailleId();

        $q = Doctrine_Query::create()
		    	->from("VisiteurMedaille vm")
			    ->select("count(*) as isUnique")
		    	->where("vm.visiteur_id = ?", $visiteur_id)
                ->andWhere('vm.connection = ?', $connection)
          ->andWhere("vm.medaille_id = ? ", $medaille_id);
		    $resultat = $q->execute(array(), Doctrine::HYDRATE_ARRAY);

		    if($resultat[0]["isUnique"] > 0)
		    	return true;
  		}
  	}

  	return false;
  }

  public function hasAlreadyMedailleWithParameters($visiteur_id, $medaille_id, $connection = "insitu")
  {
    $medaille = Doctrine_Core::getTable('Medaille')->findOneBy("guid",array($medaille_id));
    if($medaille)
    {
      $isUnique = $medaille->getIsUnique();

      if($isUnique == true)
      {
        $q = Doctrine_Query::create()
          ->from("VisiteurMedaille vm")
          ->select("count(*) as isUnique")
          ->where("vm.visiteur_id = ?", $visiteur_id)
          ->andWhere('vm.connection = ?', $connection)
          ->andWhere("vm.medaille_id = ? ", $medaille_id);
        $resultat = $q->execute(array(), Doctrine::HYDRATE_ARRAY);

        if($resultat[0]["isUnique"] > 0)
          return true;
      }
    }

    return false;
  }


  public function  delete(Doctrine_Connection $conn = null)
  {
    $guid = $this->getGuid();

    parent::delete($conn);

    $delete_log = new DeleteLog();
    $delete_log->setGuid($guid);
    $delete_log->setModelName(get_class($this));
    $delete_log->save();
  }

}
