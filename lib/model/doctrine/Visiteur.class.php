<?php

/**
 * Visiteur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Visiteur extends BaseVisiteur
{
  public function  __toString() {
    return $this->getPseudoSon() ? $this->getPseudoSon() : '';
  }

  /**
   * Sets the user password.
   *
   * @param string $password
   */
  public function setPasswordSon($password)
  {
    if($password != $this->getPasswordSon()) 
    {

      if (!$password && 0 == strlen($password))
      {
        return;
      }
      return $this->_set('password_son', md5($password));
    }
  }

  public function __call($method, $arguments)
  {
    if($method == 'setGuid')
    {
      return $this->set('guid', Guid::generate());
    }
    else
    {
      return parent::__call($method, $arguments);
    }
  }

  public function getVisiteurDataPath()
  {
    return sfConfig::get('sf_web_dir')."/visiteur/".$this->guid;
  }

  public function createDataFolder($dir = "")
  {
    $fileSystem = new sfFilesystem();
    $oldumask = umask(0);
    $fileSystem->mkdirs($this->getVisiteurDataPath(), 0755);
    $fileSystem->chmod($this->getVisiteurDataPath(), 0755);
    umask($oldumask);

    if($dir != ''){
        $oldumask = umask(0);
        $fileSystem->mkdirs($this->getVisiteurDataPath() . '/' . $dir, 0755);
        $fileSystem->chmod($this->getVisiteurDataPath() . '/' . $dir, 0755);
        umask($oldumask);
    }


  }

  public function getPhoto()
  {
    return file_get_contents($this->getVisiteurDataPath().'/photo.jpg');
  }

  public function setPhoto($data)
  {
    $this->createDataFolder();
    $img = str_replace('data:image/jpg;base64,', '', $data);
    $img = str_replace('data:image/jpeg;base64,', '', $data);
    $img = str_replace(' ', '+', $img);
    $bin = base64_decode($img);
    $this->setHasPhoto(true);
    $this->save();

     if(file_exists($this->getVisiteurDataPath().'/photo.jpg')){
         @unlink($this->getVisiteurDataPath().'/photo.jpg');
     }

    return file_put_contents($this->getVisiteurDataPath().'/photo.jpg', $bin);
  }

    public function setDocument($data, $filename = "noname", $interactif_id = "")
    {
        $this->createDataFolder($interactif_id);
        $img = str_replace('data:image/jpg;base64,', '', $data);
        $img = str_replace('data:image/jpeg;base64,', '', $data);
        $img = str_replace(' ', '+', $img);
        $bin = base64_decode($img);

        if(file_exists($this->getVisiteurDataPath().'/' . $interactif_id . '/' . $filename)){
            @unlink($this->getVisiteurDataPath().'/' . $interactif_id . '/' . $filename);
        }

        return file_put_contents($this->getVisiteurDataPath().'/' . $interactif_id . '/' . $filename, $bin);
    }

    public function browseDocuments($visiteur_id, $interactif_id_param = "", $params = array('page_size' => 100, 'offset' => 1))
    {
        $sf_root_dir = sfConfig::get('sf_root_dir').'/web/visiteur';
        $host_url = 'http://'. sfConfig::get('app_front_url') . '/visiteur';
        $finder = new sfFinder;
        $dirs = array();
        $interactif_id = '';
        $path = '/' . $visiteur_id . '/' . $interactif_id_param;
        //die($sf_root_dir.$path);

        $cpt_offset = 0;
        $cpt_page_size = 0;
        $old_interactif = '';
        foreach($finder->in($sf_root_dir.$path) as $file) {
            //echo 'search in '. $file;
            if(is_file($file)) {
                //echo $file .' == ' . filectime($file) .'<br>';
                $filepath = str_replace($sf_root_dir.$path, "", $file);
                //echo $filepath. ' <br>';
                $split = explode("/" , $filepath);
                //print_r($split);
                if(count($split) < 2)continue;

                $cpt_offset++;

                //echo "\n OFFSET= ".$cpt_offset . ' <= '.$params['offset'];
                if($cpt_offset <=  $params['offset']){
                    continue;
                }

                if(count($split) > 1){
                    if($cpt_page_size < $params['page_size']){
                        if($interactif_id_param == ''){
                            $interactif_id = $split[0];
                        }else{
                            $interactif_id = $interactif_id_param;
                        }
                        $filename = $split[1];

                        if($filename == '.DS_Store')continue;

                        $result = array("url" => $host_url . $path. '/' . $interactif_id. '/' . $filename, "creation_date" => date("Y-m-d H:i:s", filemtime($file)));


                        $interactif = array();
                        if($old_interactif != $interactif_id){
                            $interactif_info = Doctrine::getTable('Interactif')->findOneByGuid($interactif_id);

                            if($interactif_info){
                                $query = 'SELECT e.guid AS guid, e.libelle AS libelle';
                                $query .= ' FROM exposition e, exposition_parcours e2, parcours_interactif p, interactif i';
                                $query .= ' WHERE (';
                                $query .= ' e.guid = e2.exposition_id';
                                $query .= ' AND e2.parcours_id = p.parcours_id';
                                $query .= ' AND p.interactif_id = i.guid';
                                $query .= ' AND i.guid = "'.$interactif_id.'"';
                                $query .= ' ) group by guid';
                                $expo_info = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($query);

                                $interactif = array('libelle' => $interactif_info->getLibelle(), 'url_illustration' => $interactif_info->getUrlIllustration(), 'expositions' => $expo_info);
                            }
                        }

                        $old_interactif = $interactif_id;


                        $dirs["interactifs"][$interactif_id][] =  array_merge($interactif, $result);
                    }
                    $cpt_page_size++;
                }


            }
        }
        //print_r($dirs);
        return $dirs;
    }

    public function downloadDocument($path)
    {
        return file_get_contents($this->getVisiteurDataPath().$path);
    }


  public function save(Doctrine_Connection $conn = null)
  {
    if($this->isNew())
    {
      $this->createDataFolder();
    }
      if($this->getHasPhoto() == 1){
          $avatar = 'http://'.sfConfig::get('app_front_url') . '/visiteur/'.$this->getGuid().'/photo.jpg';
          $this->setUrlAvatar($avatar);
      }else{
          $this->setUrlAvatar('');
      }



    $this->setIsTosync(1);
    parent::save($conn);
  }

  public function  delete(Doctrine_Connection $conn = null)
  {
    $guid = $this->getGuid();

    parent::delete($conn);

    $delete_log = new DeleteLog();
    $delete_log->setGuid($guid);
    $delete_log->setModelName(get_class($this));
    $delete_log->save();

    $fileSystem = new sfFilesystem();
    @$fileSystem->remove($this->getVisiteurDataPath());
  }

  public function createAnonymous($context_creation_id)
  {
    $this->setGuid(Guid::generate());
    $this->setIsAnonyme(1);
    if(isset($context_creation_id))
      $this->setContexteCreationId($context_creation_id);

    return $this;
  }

  public function getNeeds(ExpositionVisiteurNeeds $needs)
  {
      $visiteur_needs = array();

      if($needs->getHasGenre() && empty($this->genre))
      {
        $visiteur_needs["genre"] = "true";
      }
      if($needs->getHasCodePostal() && empty($this->code_postal))
      {
        $visiteur_needs["code_postal"] = "true";
      }
      if($needs->getHasDateNaissance() && empty($this->date_naissance))
      {
        $visiteur_needs["date_naissance"] = "true";
      }
      if($needs->getHasVille() && empty($this->ville))
      {
        $visiteur_needs["ville"] = "true";
      }

      if($needs->getLangue()->count() > 0 && empty($this->langue_id))
      {
        foreach($needs->getLangue() as $langue) {
          $visiteur_needs["langues"][] = array("guid" => $langue->getGuid(), "libelle" => $langue->getLibelle());
        }
      }
      if($needs->getPreferenceMedia()->count() > 0)
      {
        foreach($needs->getPreferenceMedia() as $preferenceMedia) {
          $visiteur_needs["preference_medias"][] = array("guid" => $preferenceMedia->getGuid(), "libelle" =>  $preferenceMedia->getLibelle());
        }
      }
      //langue, genre, cp, date de naissance, ville, préférence média
      if(count( $visiteur_needs) == 0)
        return "";
      else
        return $visiteur_needs;
  }

  /**
   * [getTotalXp return total score for all typologies for this visiteur]
   * @return [type] [description]
   */
  public function getTotalXp()
  {
    $score_total = 0 ;
    foreach($this->getXp() as $xp)
    {
      $score_total += $xp->getScore();
    }

    return $score_total;
  }
}
